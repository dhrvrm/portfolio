---
import Layout from '../../layouts/Layout.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import { getCollection } from 'astro:content';
import { AUTHOR } from '../../data/constants';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

const formattedDate = new Date(post.data.publishDate).toLocaleDateString(
	'en-US',
	{
		year: 'numeric',
		month: 'long',
		day: 'numeric',
	}
);

const allPosts = await getCollection('blog');
let prevPost, nextPost;

if (post.data.series) {
	const seriesPosts = allPosts
		.filter((p) => p.data.series === post.data.series)
		.sort((a, b) => a.data.seriesPart - b.data.seriesPart);

	const currentIndex = seriesPosts.findIndex((p) => p.slug === post.slug);
	prevPost = seriesPosts[currentIndex - 1];
	nextPost = seriesPosts[currentIndex + 1];
}

const ogImage = post.data.image || `/blogs/${post.slug}.png`;
---

<Layout
	title={post.data.title}
	description={post.data.excerpt}
	image={ogImage}
	article={true}
>
	<article class='container mx-auto px-6 py-16'>
		<nav class='flex mb-8 text-sm' aria-label='Breadcrumb'>
			<ol class='flex items-center space-x-2'>
				<li>
					<a href='/' class='text-gray-500 hover:text-modern-purple'>Home</a>
				</li>
				<li class='text-gray-400'>/</li>
				<li>
					<a href='/blog' class='text-gray-500 hover:text-modern-purple'>Blog</a
					>
				</li>
				<li class='text-gray-400'>/</li>
				<li class='text-modern-purple'>{post.data.title}</li>
			</ol>
		</nav>

		{
			post.data.series && (
				<div class='mb-8 bg-gray-50 dark:bg-gray-800 rounded-lg p-4'>
					<p class='text-sm text-gray-600 dark:text-gray-400 mb-4'>
						Part {post.data.seriesPart} of {post.data.series}
					</p>
					<div class='flex justify-between'>
						{prevPost && (
							<a
								href={`/blog/${prevPost.slug}`}
								class='text-primary-600 hover:text-primary-700 flex items-center gap-2'
							>
								← Previous: {prevPost.data.title}
							</a>
						)}
						{nextPost && (
							<a
								href={`/blog/${nextPost.slug}`}
								class='text-primary-600 hover:text-primary-700 flex items-center gap-2'
							>
								Next: {nextPost.data.title} →
							</a>
						)}
					</div>
				</div>
			)
		}

		<div class='grid grid-cols-1 lg:grid-cols-[1fr_250px] gap-12'>
			<div>
				<header class='mb-12'>
					<div class='flex gap-2 mb-6'>
						{
							post.data.categories.map((category: string) => (
								<span class='bg-gradient-to-r from-modern-purple/10 to-modern-indigo/10 dark:from-modern-purple/20 dark:to-modern-indigo/20 text-modern-purple dark:text-modern-cyan px-4 py-2 rounded-full text-sm font-medium'>
									{category}
								</span>
							))
						}
					</div>
					<h1 class='text-4xl md:text-5xl font-bold mb-8'>{post.data.title}</h1>

					{/* Featured Image */}
					{
						post.data.image && (
							<div class='mb-8 overflow-hidden rounded-xl shadow-lg'>
								<img
									src={post.data.image}
									alt={`Featured image for ${post.data.title}`}
									class='w-full h-64 md:h-80 lg:h-96 object-cover hover:scale-105 transition-transform duration-700'
								/>
							</div>
						)
					}
					<div class='flex flex-col gap-3'>
						<div class='flex items-center gap-3'>
							<img
								src={AUTHOR.avatar}
								alt={AUTHOR.name}
								class='w-10 h-10 rounded-full'
							/>
							<div>
								<p class='font-medium text-gray-900 dark:text-gray-100'>
									{AUTHOR.name}
								</p>
								<p class='text-sm text-gray-600 dark:text-gray-400'>
									{AUTHOR.bio}
								</p>
							</div>
						</div>
						<div
							class='flex items-center gap-3 text-xs text-gray-500 dark:text-gray-500 ml-13'
						>
							<time datetime={post.data.publishDate.toISOString()}
								>{formattedDate}</time
							>
							<span>•</span>
							<span>{post.data.readingTime} min read</span>
						</div>
					</div>
				</header>

				<div class='prose prose-lg dark:prose-invert max-w-none'>
					<Content />
				</div>

				<!-- Share Section -->
				<div class='mt-12 pt-8 border-t border-gray-200 dark:border-gray-700'>
					<div class='flex flex-col items-center gap-4'>
						<p class='text-lg font-medium text-gray-900 dark:text-gray-100'>
							Found this helpful? Share this post!
						</p>
						<div class='flex items-center gap-4'>
							<button
								id='shareButton'
								class='flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-modern-purple to-modern-indigo text-white rounded-lg hover:from-modern-purple/90 hover:to-modern-indigo/90 transition-all duration-200 transform hover:scale-105'
							>
								<svg
									class='w-5 h-5'
									fill='none'
									stroke='currentColor'
									viewBox='0 0 24 24'
								>
									<path
										stroke-linecap='round'
										stroke-linejoin='round'
										stroke-width='2'
										d='M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z'
									></path>
								</svg>
								Share
							</button>

							<button
								id='copyLinkButton'
								class='flex items-center gap-2 px-6 py-3 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-200'
							>
								<svg
									class='w-5 h-5'
									fill='none'
									stroke='currentColor'
									viewBox='0 0 24 24'
								>
									<path
										stroke-linecap='round'
										stroke-linejoin='round'
										stroke-width='2'
										d='M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z'
									></path>
								</svg>
								<span id='copyText'>Copy Link</span>
							</button>
						</div>
					</div>
				</div>
			</div>

			<aside class='hidden lg:block'>
				<TableOfContents headings={headings} />
			</aside>
		</div>

		{
			post.data.series && (
				<div class='mt-16 mb-8 bg-gray-50 dark:bg-gray-800 rounded-lg p-4'>
					<p class='text-sm text-gray-600 dark:text-gray-400 mb-4'>
						Part {post.data.seriesPart} of {post.data.series}
					</p>
					<div class='flex justify-between'>
						{prevPost && (
							<a
								href={`/blog/${prevPost.slug}`}
								class='text-primary-600 hover:text-primary-700 flex items-center gap-2'
							>
								← Previous: {prevPost.data.title}
							</a>
						)}
						{nextPost && (
							<a
								href={`/blog/${nextPost.slug}`}
								class='text-primary-600 hover:text-primary-700 flex items-center gap-2'
							>
								Next: {nextPost.data.title} →
							</a>
						)}
					</div>
				</div>
			)
		}

		<div class='mt-16 border-t dark:border-gray-800 pt-8'>
			<div class='bg-gray-50 dark:bg-gray-800 rounded-lg p-8'>
				<div class='flex items-start gap-6'>
					<img
						src={AUTHOR.avatar}
						alt={AUTHOR.name}
						class='w-24 h-24 rounded-full'
					/>
					<div class='flex-1'>
						<h3 class='text-xl font-semibold mb-2'>{AUTHOR.name}</h3>
						<p class='text-gray-600 dark:text-gray-400 mb-4'>
							{AUTHOR.shortBio}
						</p>
						<div class='flex gap-4'>
							{
								Object.entries(AUTHOR.social).map(([platform, url]) => (
									<a
										href={url}
										target='_blank'
										rel='noopener noreferrer'
										class='text-gray-600 dark:text-gray-400 hover:text-primary-600'
									>
										<span class='capitalize'>{platform}</span>
									</a>
								))
							}
						</div>
						<div class='mt-4'>
							<a
								href='/contact'
								class='inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors'
							>
								Get in Touch →
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	</article>

	<!-- Floating Share Button -->
	<div
		id='floatingShare'
		class='fixed bottom-6 right-6 z-50 opacity-0 pointer-events-none transition-all duration-300'
	>
		<button
			id='floatingShareButton'
			class='flex items-center gap-2 px-4 py-3 bg-gradient-to-r from-modern-purple to-modern-indigo text-white rounded-full shadow-lg hover:from-modern-purple/90 hover:to-modern-indigo/90 transition-all duration-200 transform hover:scale-110'
		>
			<svg
				class='w-5 h-5'
				fill='none'
				stroke='currentColor'
				viewBox='0 0 24 24'
			>
				<path
					stroke-linecap='round'
					stroke-linejoin='round'
					stroke-width='2'
					d='M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z'
				></path>
			</svg>
			<span class='hidden sm:inline'>Share</span>
		</button>
	</div>

	<script>
		// Share functionality
		const currentUrl = window.location.href;
		const currentTitle = document.title;

		// Share button functionality
		const shareButton = document.getElementById('shareButton');
		shareButton?.addEventListener('click', async () => {
			if (navigator.share) {
				try {
					await navigator.share({
						title: currentTitle,
						url: currentUrl,
					});
				} catch (err) {
					console.log('Share cancelled');
				}
			} else {
				// Fallback: copy to clipboard
				const success = await copyToClipboard(currentUrl);
				if (success) {
					showToast('Link copied to clipboard!');
				} else {
					showToast('Failed to copy link');
				}
			}
		});

		// Copy link button functionality
		const copyLinkButton = document.getElementById('copyLinkButton');
		const copyText = document.getElementById('copyText');
		copyLinkButton?.addEventListener('click', async () => {
			try {
				const success = await copyToClipboard(currentUrl);
				if (success) {
					copyText.textContent = 'Copied!';
					copyLinkButton.classList.add(
						'bg-green-100',
						'text-green-700',
						'dark:bg-green-900',
						'dark:text-green-300'
					);
					setTimeout(() => {
						copyText.textContent = 'Copy Link';
						copyLinkButton.classList.remove(
							'bg-green-100',
							'text-green-700',
							'dark:bg-green-900',
							'dark:text-green-300'
						);
					}, 2000);
				} else {
					showToast('Failed to copy link');
				}
			} catch (error) {
				console.error('Copy failed:', error);
				showToast('Failed to copy link');
			}
		});

		// Floating share button functionality
		const floatingShareButton = document.getElementById('floatingShareButton');
		floatingShareButton?.addEventListener('click', async () => {
			if (navigator.share) {
				try {
					await navigator.share({
						title: currentTitle,
						url: currentUrl,
					});
				} catch (err) {
					console.log('Share cancelled');
				}
			} else {
				const success = await copyToClipboard(currentUrl);
				if (success) {
					showToast('Link copied to clipboard!');
				} else {
					showToast('Failed to copy link');
				}
			}
		});

		// Show floating share button on scroll
		const floatingShare = document.getElementById('floatingShare');
		let lastScrollTop = 0;

		window.addEventListener('scroll', () => {
			const scrollTop =
				window.pageYOffset || document.documentElement.scrollTop;
			const windowHeight = window.innerHeight;
			const documentHeight = document.documentElement.scrollHeight;

			// Show floating button when scrolled down and not at the bottom
			if (scrollTop > 300 && scrollTop < documentHeight - windowHeight - 100) {
				floatingShare.classList.remove('opacity-0', 'pointer-events-none');
				floatingShare.classList.add('opacity-100', 'pointer-events-auto');
			} else {
				floatingShare.classList.add('opacity-0', 'pointer-events-none');
				floatingShare.classList.remove('opacity-100', 'pointer-events-auto');
			}

			lastScrollTop = scrollTop;
		});

		// Utility functions
		async function copyToClipboard(text) {
			try {
				await navigator.clipboard.writeText(text);
				return true;
			} catch (err) {
				console.log('Modern clipboard API failed, trying fallback...');
				try {
					// Fallback for older browsers
					const textArea = document.createElement('textarea');
					textArea.value = text;
					textArea.style.position = 'fixed';
					textArea.style.left = '-999999px';
					textArea.style.top = '-999999px';
					document.body.appendChild(textArea);
					textArea.focus();
					textArea.select();
					const successful = document.execCommand('copy');
					document.body.removeChild(textArea);
					return successful;
				} catch (fallbackErr) {
					console.error('Fallback copy failed:', fallbackErr);
					return false;
				}
			}
		}

		function showToast(message) {
			// Create toast notification
			const toast = document.createElement('div');
			toast.className =
				'fixed top-4 right-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300';
			toast.textContent = message;
			document.body.appendChild(toast);

			// Animate in
			setTimeout(() => {
				toast.classList.remove('translate-x-full');
			}, 100);

			// Remove after 3 seconds
			setTimeout(() => {
				toast.classList.add('translate-x-full');
				setTimeout(() => {
					document.body.removeChild(toast);
				}, 300);
			}, 3000);
		}
	</script>
</Layout>
